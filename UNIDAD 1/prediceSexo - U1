import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Leer el conjunto de datos desde un archivo CSV
df = pd.read_csv("Sexo.csv")

# Dividir el conjunto de datos en características (X) y etiquetas (y)
X = df.iloc[:, :-1].values  # Columnas de altura y peso
y = df['Sexo'].map({'M': 1, 'F': -1}).values  # Codificar género en valores numéricos

class Perceptron(object):
    def __init__(self, eta=0.01, n_iter=10):
        self.eta = eta
        self.n_iter = n_iter

    def fit(self, X, y):
        self.w_ = np.zeros(1 + X.shape[1])
        self.errors_ = []

        for _ in range(self.n_iter):
            errors = 0
            for xi, target in zip(X, y):
                update = self.eta * (target - self.predict(xi))
                self.w_[1:] += update * xi
                self.w_[0] += update
                errors += int(update != 0.0)
            self.errors_.append(errors)
        return self

    def net_input(self, X):
        """Calculate net input"""
        return np.dot(X, self.w_[1:]) + self.w_[0]

    def predict(self, X):
        """Return class label after unit step"""
        return np.where(self.net_input(X) >= 0.0, 1, -1)

# Crear una instancia del perceptrón y entrenarlo
perceptron = Perceptron(eta=0.1, n_iter=100)
perceptron.fit(X, y)

# Crear una gráfica de dispersión de los datos
plt.scatter(X[y == 1, 0], X[y == 1, 1], color='blue', marker='o', label='Masculino')
plt.scatter(X[y == -1, 0], X[y == -1, 1], color='red', marker='x', label='Femenino')

# Crear una línea que representa la región de decisión del perceptrón
x_min, x_max = X[:, 0].min() - 10, X[:, 0].max() + 10
y_min, y_max = X[:, 1].min() - 10, X[:, 1].max() + 10
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.1), np.arange(y_min, y_max, 0.1))
Z = perceptron.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)
plt.contourf(xx, yy, Z, alpha=0.3, cmap='coolwarm')
plt.xlim(xx.min(), xx.max())
plt.ylim(yy.min(), yy.max())

plt.xlabel('Altura')
plt.ylabel('Peso')
plt.legend(loc='upper left')

# Hacer una predicción y mostrarla en la gráfica
nueva_altura = 170.0
nuevo_peso = 65.5
nueva_instancia = np.array([nueva_altura, nuevo_peso])
prediccion = perceptron.predict(nueva_instancia)

# Interpretar la predicción
if prediccion == 1:
    resultado = "Masculino"
else:
    resultado = "Femenino"

# Mostrar la predicción en la gráfica
plt.scatter(nueva_altura, nuevo_peso, color='green', marker='s', label=f'Predicción: {resultado}')
plt.legend(loc='upper left')

# Mostrar la gráfica
plt.show()

